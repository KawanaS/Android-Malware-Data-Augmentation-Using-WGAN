# -*- coding: utf-8 -*-
"""
Created on Mon Jun  5 16:45:56 2023

@author: Kawana S
"""

# example of calculating the frechet inception distance in Keras
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import cv2
import os
import random
import numpy
from numpy import cov
from numpy import trace
from numpy import iscomplexobj
from numpy import asarray
from numpy.random import randint
from scipy.linalg import sqrtm
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.datasets.mnist import load_data
from skimage.transform import resize
import openpyxl
import csv
import io

os.environ["CUDA_VISIBLE_DEVICES"]="0" #Num of GPUs
#mirrored_strategy = tf.distribute.MirroredStrategy(devices=["/gpu:0","/gpu:1"])

config = tf.compat.v1.ConfigProto(device_count={'GPU': 0})
config.gpu_options.allow_growth = True
sess = tf.compat.v1.Session(config=config)
 
# scale an array of images to a new size
def scale_images(images, new_shape):
    images_list = list()
    for image in images:
    # resize with nearest neighbor interpolation
        new_image = resize(image, new_shape, 0)
        # store
        images_list.append(new_image)
    return asarray(images_list)

# calculate frechet inception distance
def calculate_fid(model, images1, images2):
     # calculate activations
     act1 = model.predict(images1)
     act2 = model.predict(images2)
     # calculate mean and covariance statistics
     mu1, sigma1 = act1.mean(axis=0), cov(act1, rowvar=False)
     mu2, sigma2 = act2.mean(axis=0), cov(act2, rowvar=False)
     # calculate sum squared difference between means
     ssdiff = numpy.sum((mu1 - mu2)**2.0)
     # calculate sqrt of product between cov
     covmean = sqrtm(sigma1.dot(sigma2))
     # check and correct imaginary numbers from sqrt
     if iscomplexobj(covmean):
         covmean = covmean.real
         # calculate score
         fid = ssdiff + trace(sigma1 + sigma2 - 2.0 * covmean)
     return fid
 
# prepare the inception v3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(299,299,3))
# define two fake collections of images

DATA_DIR_1 = 'E:/Python/Machine_Learning/Android_source_code_analysis/classes-GAN-generated/malware128x128'
DATA_DIR_2 = 'E:/Python/Machine_Learning/Android_source_code_analysis/classes_dex/malware'

images1 = []
images2 = []

def load_data_1():
    path = os.path.join(DATA_DIR_1)
    for img in os.listdir(path):
        img_array = cv2.imread(os.path.join(path, img),cv2.IMREAD_GRAYSCALE)
        #new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
        images1.append([img_array])
    return images1
            
def load_data_2():
    path = os.path.join(DATA_DIR_2)
    for img in os.listdir(path):
        img_array = cv2.imread(os.path.join(path, img),cv2.IMREAD_GRAYSCALE)
        #new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
        images2.append([img_array])
    return images2
        
images1 = load_data_1()
images2 = load_data_2()

images1 = np.array(images1)
images2 = np.array(images2)


# convert integer to floating point values
images1 = images1.astype('float32')
images2 = images2.astype('float32')
# resize images
images1 = scale_images(images1, (299,299,3))
images2 = scale_images(images2, (299,299,3))
print('Scaled', images1.shape, images2.shape)
# pre-process images
images1 = preprocess_input(images1)
images2 = preprocess_input(images2)

fids=[]

def write_csv(data,link):
    with open('FID.csv','a',encoding="utf-8") as file:
        writer=csv.writer(file)
        rows=[data]
        writer.writerow(rows)

for i in images1:           
   # fid between images1 and images2
    fid = calculate_fid(model, i, images2)
    print('FID (different): %.3f' % fid)
    fids.append(fid)
    print('FID (different): %.3f' % fid)
    write_csv(fids,i)
    
    
'''epochs = range(1, 361)
plt.plot(epochs,fids, label='FID')
plt.title('Frechet Inception Distance')
plt.xlabel('Epochs')
plt.ylabel('Frechet Inception Distance')
plt.legend()
plt.show()'''